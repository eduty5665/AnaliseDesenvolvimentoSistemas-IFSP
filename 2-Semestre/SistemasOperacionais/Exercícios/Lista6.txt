1. O que � um impasse (deadlock), cite um exemplo computacional.
   Um Deadlock é um empace entre os processos computacionais, aonde temos um determinado número de recursos e os processos exigem mais deste mesmo recurso. Um exemplo bem simples é quando um determinado programa X pede a impressão de um documento a impressora, e no mesmo momento o programa Y também requisita a impressora para impressão.

2. Quais s�o as 4 condi��es para a exist�ncia de um deadlock?
Explique a rela��o de cada uma delas com um poss�vel deadlock e como evit�-las.
   Existem quatro condições para se ter um Deadlock, a primeira é a exclusão mútua, aonde os recursos estão sendo utilizados ou estão indisponiveis, fazendo com que os processos subsequentes não possam ser atentidos. Para evitarmos a exclusão mputua devemos alocar os recursos quando for absolutamente necessário; o segundo é o uso e espera, aonde processos que já tem algum recurso podem requisitar outros, isso faz com que os recursos fiquem escassos, pois podemos dar quatro recursos a um processo e somente um ao outro, por exemplo, para se evitar isso quando um processo requisitar mais recursos devemos liberar todos e requisita-los novamente; o terceiro é a não-preempção, aonde os recursos alocados em um processo não podem ser etirados até que o processo os libere, acarretando na espera de outros processos por determinado recurso, para evitar isso devemos alocar os recursos com sabedoria, pois a preempção também não é recomendada; o quarto e ultimo item é a espera circular, para evitar esta cadeia circular deve-se enmerar os recursos, fazendo com que os processos os requisitem de forma crescente.

3. Quais solu��es podem ser sugeridas para evitar um deadlock em um sistema operacional?
  Existem muitos algoritmos que detectam e resolvem os Deadlocks, mas para evitar um deadlock devemos atar uma das quatro condições que o fazem existir, ou evitar dinamicamente o problema, alocando recursos com base em um estado seguro ou inseguro, para tal temos o algoritmo do Banqueiro.
  O algoritmo do Banqueiro considera cada requisição no momento em que ela ocorre, verificando se esta requisição leva a um estado seguro ou inseguro, suplindo as requisições seguras e adiando as inseguras.